name: deploy-argocd

trigger: none

variables:
  - group: aws-keys
  - name: AWS_REGION
    value: us-east-2  # This value was modified by the initial-setup python script
  - name: APP_NAME
    value: gonchi # This value was modified by the initial-setup python script
    

pool:
  vmImage: 'ubuntu-latest' 
  # If you are using a self-hosted agent, comment out the previous line and uncomment the following three
  # name: <agent-pool-name> # Insert here the name of the agent pool you created
  # demands:
  #   - agent.name -equals <agent-name> # Insert here the name of the agent you created


steps:
# # In this case it's necessary to specify the checkout with the persistCredential options set to true. This will enable us to push the changes to the repo.
- checkout: self
  persistCredentials: true

- task: HelmInstaller@0
  inputs:
    displayName: Install helm
    helmVersion: '3.11.2'
    installKubectl: true

- script: | 
    mkdir ~/.aws
    echo -e "[default]\naws_access_key_id = $(aws_access_key_id)\naws_secret_access_key = $(aws_secret_access_key)" > ~/.aws/credentials
    echo -e "[default]\nregion = $(AWS_REGION)"> ~/.aws/config 
  displayName: 'Configure AWS Profile'

- task: AWSCLI@1
  displayName: 'Update KubeConfig'
  inputs:
    awsCredentials: 'aws'
    regionName: '$(AWS_REGION)' 
    awsCommand: 'eks'
    awsSubCommand: 'update-kubeconfig'
    awsArguments: '--name $(APP_NAME)-cluster --region $(AWS_REGION)' 

- script: | 
    helm install argocd -n argocd helm/infra/argo-cd --values helm/infra/argo-cd/values-custom.yaml --dependency-update --create-namespace
  displayName: 'Deploy Argocd'

# This deploys the necessary resources for ArgoCD to be able to manage itslef
- script: |    
    # We first create an ArgoCD AppProject called "argocd" where all ArgoCD self-managment resources will exist.
    kubectl create -n argocd -f $(Agent.BuildDirectory)/s/argo-cd/self-manage/appprojects/argocd-appproject.yaml  

    # Then we create an application that will automatically deploy any ArgoCD AppProjects we specify in the argo-cd/self-manage/appprojects/ directory.
    kubectl create -n argocd -f $(Agent.BuildDirectory)/s/argo-cd/self-manage/argocd-appprojects-application.yaml  
    
    # Then we create an application that will monitor the helm/infra/argocd directory, the same we used to deploy ArgoCD, making ArgoCD self-managed. Any changes we apply in the helm/infra/argocd directory will be automatically applied.
    kubectl create -n argocd -f $(Agent.BuildDirectory)/s/argo-cd/self-manage/argocd-application.yaml  

    # Finally, we create an application that will automatically deploy any ArgoCD Applications we specify in the argo-cd/applications directory (App of Apps pattern).
    kubectl create -n argocd -f $(Agent.BuildDirectory)/s/argo-cd/self-manage/argocd-apps-application.yaml  
  displayName: 'Make ArgoCD self-managed & implemente App of Apps pattern'

- script: |
    while [[ $(kubectl get -n service-mesh service istio-gateway -o 'jsonpath={.status.loadBalancer.ingress[0].hostname}') == '' ]]; do
      echo "Istio Gateway is not ready. Checking again in 5 seconds..."
      sleep 5
    done
    kubectl get -n service-mesh service istio-gateway -o=jsonpath="{.status.loadBalancer.ingress[].hostname}{'\n'}" > host_endpoint.txt
  displayName: 'Get Host Endpoint'

- script: |
    sed -i "s/host:.*/host: $(cat host_endpoint.txt | tr -d '\n') # This value was modified by the deploy-argocd pipeline/g" helm/my-app/frontend/values.yaml    
  displayName: 'Modify values'
  condition: always()

- script: |
    git pull origin main
    git config --global user.email "AzureDevOps@ArgoCDDeployPipeline.com"
    git config --global user.name "Azure DevOps - ArgoCD Deploy Pipeline"
    git checkout -b main
    git add helm/my-app/frontend/values.yaml
    git commit -m "Frontend hosts URLs updated by Azure DevOps"
    git push --set-upstream origin main
  displayName: 'Push changes to GitHub'

- script: |
    echo "DEV:" > frontend_endpoints.txt
    echo "$(cat host_endpoint.txt)/dev/" >> frontend_endpoints.txt
    echo " " >> frontend_endpoints.txt
    echo "STAGE:" >> frontend_endpoints.txt
    echo "$(cat host_endpoint.txt)/stage/" >> frontend_endpoints.txt
    echo " " >> frontend_endpoints.txt
    echo "PROD:" >> frontend_endpoints.txt
    echo "$(cat host_endpoint.txt)/" >> frontend_endpoints.txt
  displayName: 'Save Endpoints'

- task: PublishBuildArtifacts@1
  displayName: 'Export Frontend Endpoints'
  inputs:
    PathtoPublish: 'frontend_endpoints.txt'
    ArtifactName: 'Access'
    publishLocation: 'Container'

- script: |
    while [[ $(kubectl get ingress -n argocd $(kubectl get ingress -n argocd | awk 'NR>1{print $1}') -o 'jsonpath={.status.loadBalancer.ingress[0].hostname}') == '' ]]; do
      echo "Ingress is not ready. Checking again in 5 seconds..."
      sleep 5
    done
    kubectl get ingress -n argocd $(kubectl get ingress -n argocd | awk 'NR>1{print $1}') -o=jsonpath="{'http://'}{.status.loadBalancer.ingress[].hostname}{'\n'}" > argocd-access.txt
    echo "admin" >> argocd-access.txt
    while [[ $(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}") == '' ]]; do
      echo "Secret is not ready. Checking again in 5 seconds..."
      sleep 5
    done
    echo $(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d) >> argocd-access.txt
  displayName: 'Save Access'

- task: PublishBuildArtifacts@1
  displayName: 'Export Access'
  inputs:
    PathtoPublish: 'argocd-access.txt'
    ArtifactName: 'Access'
    publishLocation: 'Container'
