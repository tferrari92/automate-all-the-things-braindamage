name: deploy-infra

trigger: none

pool:
  vmImage: 'ubuntu-latest' 
  # If you are using a self-hosted agent, comment out the previous line and uncomment the following three
  # name: <agent-pool-name> # Insert here the name of the agent pool you created
  # demands:
  #   - agent.name -equals <agent-name> # Insert here the name of the agent you created

variables:
  AWS_REGION: us-east-2  # This value was modified by the initial-setup python script

steps:
# In this case it's necessary to specify the checkout with the persistCredential options set to true. This will enable us to push the changes to the repo.
- checkout: self
  persistCredentials: true

- task: TerraformInstaller@1
  displayName: Install terraform
  inputs:
    terraformVersion: '1.4.6'

- task: TerraformCLI@1
  displayName: 'Terraform Init Backend'
  inputs:
    command: init
    workingDirectory: 'terraform/backend'
    providerServiceAws: 'aws' 
    providerAwsRegion: $(AWS_REGION) 

# This step will fail if the infrastructure was successfully deployed in a prevous build
- task: TerraformCLI@1
  displayName: 'Terraform Apply Backend'
  inputs:
    command: apply
    workingDirectory: 'terraform/backend'
    providerServiceAws: 'aws' 
    providerAwsRegion: $(AWS_REGION) 
  # continueOnError: true

- script: cp terraform/backend/terraform.tfstate terraform/aws
  displayName: 'Move terraform.tfstate to /terraform/aws/ directory'
  condition: succeeded() # This will make this step be skipped if the previous step failed

- task: TerraformCLI@1
  displayName: 'Terraform Init Infra'
  condition: always()
  inputs:
    command: init
    workingDirectory: 'terraform/aws'
    backendType: aws 
    backendServiceAws: aws 
    providerServiceAws: 'aws' 
    providerAwsRegion: $(AWS_REGION) 
    commandOptions: '-force-copy'

- task: TerraformCLI@1
  displayName: 'Terraform Apply Infra'
  condition: always()
  inputs:
    command: apply
    workingDirectory: 'terraform/aws'
    providerServiceAws: 'aws' 
    providerAwsRegion: $(AWS_REGION)

# We update the local repo with a pull just in case there have been any recent modifications
- script: |
    git pull origin main
  displayName: Update repo

- script: |
    echo "$(terraform -chdir=terraform/aws output -raw elasticache_dev_primary_endpoint_address) # This value was modified by the deploy-infra pipeline" > elasticache_dev_endpoint.txt
    echo "$(terraform -chdir=terraform/aws output -raw elasticache_stage_primary_endpoint_address) # This value was modified by the deploy-infra pipeline" > elasticache_stage_endpoint.txt
    echo "$(terraform -chdir=terraform/aws output -raw elasticache_prod_primary_endpoint_address) # This value was modified by the deploy-infra pipeline" > elasticache_prod_endpoint.txt
  displayName: 'Save ElastiCache DBs endpoints'
  condition: always()

- script: |
    sed -i "s/redis_host:.*/redis_host: $(cat elasticache_dev_endpoint.txt | tr -d '\n')/g" helm/my-app/backend/environments/values-dev.yaml
    sed -i "s/redis_host:.*/redis_host: $(cat elasticache_stage_endpoint.txt | tr -d '\n')/g" helm/my-app/backend/environments/values-stage.yaml
    sed -i "s/redis_host:.*/redis_host: $(cat elasticache_prod_endpoint.txt | tr -d '\n')/g" helm/my-app/backend/environments/values-prod.yaml
  displayName: 'Modify values for each environment'
  condition: always()

- script: |
    git config --global user.email "AzureDevOps@Build&DeployAppPipeline.com"
    git config --global user.name "Azure DevOps - Build & Deploy App Pipeline"
    git checkout -b main
    git add helm/my-app/backend/environments/
    git commit -m "ElastiCache endpoints updated in environments values.yaml files by Azure DevOps"
    git push --set-upstream origin main
  displayName: 'Push changes to GitHub'
  condition: always()

- script: |
    echo "Assuming you are on the root directory of the automate-all-the-things repo, run this:" > ssh-to-bastion.txt
    echo "chmod 400 terraform/aws/templates/private-key" >> ssh-to-bastion.txt
    echo "ssh -i terraform/aws/templates/private-key ubuntu@$(terraform -chdir=terraform/aws output -raw ssh_host)" >> ssh-to-bastion.txt
  displayName: 'Save SSH command'
  condition: always()

- task: PublishBuildArtifacts@1
  displayName: 'Export SSH command'
  condition: always()
  inputs:
    PathtoPublish: 'ssh-to-bastion.txt'
    ArtifactName: 'SSH to bastion'
    publishLocation: 'Container'
